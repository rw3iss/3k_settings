#class {miphp} {kill}
#class {miphp} {open}

#alias {update_status} {

	#math   {idle_hr}       {$idle / 3600};
	#math   {idle_min}      {$idle % 3600 / 60};
	#math   {idle_sec}      {$idle % 60};
	#if     {$idle_hr < 10} {#var idle_hr  0$idle_hr};
	#if     {$idle_min < 10}{#var idle_min 0$idle_min};
	#if     {$idle_sec < 10}{#var idle_sec 0$idle_sec};
	#format {idle_cap}      {%+4s}  {<268>[<128>$idle_hr<268>:<128>$idle_min<268>:<128>$idle_sec<268>]<088>};

	#var	{my[hp][graph]}		{@graph{$my[hp][current];${my[hp][max]}}};
	#var	{my[sp][graph]}		{@graph{$my[sp][current];$my[sp][max]}};
	#var	{my[gp1][graph]}	{@graph{$my[gp1][current];$my[gp1][max]}};
	#var	{my[gp2][graph]}	{@graph{$my[gp2][current];$my[gp2][max]}};
	#var	{enemy[graph]}		{@graph{$enemy[hp];100}};
	#format {hp}			{%+4s} {$my[hp][current]};
	#format {hp_max}		{%+4s} {$my[hp][max]};
	#format {sp}			{%+4s} {$my[sp][current]};
	#format {sp_max}		{%+4s} {$my[sp][max]};
	#format {gp1}			{%+4s} {$my[gp1][current]};
	#format {gp1_max}		{%+4s} {$my[gp1][max]};
	#format {gp2}			{%+4s} {$my[gp2][current]};
	#format {gp2_max}		{%+4s} {$my[gp2][max]};
	#format {ehealth}		{%+7s} {$enemy[hp]%%};

	#math corpses[total] {$corpses[coffin] + $corpses[inventory] + $corpses[smuggle] + $corpses[freezer]};

	#if $my[prots][S]  {#if $defs[shield] {#var shield_string <ACA>S**<088>} {#var shield_string S**} } {#var shield_string {}};
	#if $my[prots][B]  {#if $defs[blink] {#var blink_string <ACA>B**<088>} {#var blink_string B**} } {#var blink_string {}};
	#if $my[prots][A]  {#if $defs[armor] {#var armor_string <ACA>A**<088>} {#var armor_string A**} } {#var armor_string {}};
	#if $my[prots][MS] {#if $defs[MS] {#var mag_string <ACA>MS**<088>} {#var mag_string MS**} } {#var mag_string {}};
	#if $my[prots][RS] {#if $defs[RS] {#var rs_string <ACA>RS**<088>} {#var rs_string RS**} } {#var rs_string {}};
	#if $my[prots][SS] {#if $defs[SS] {#var ss_string <ACA>SS**<088>} {#var ss_string SS**} } {#var ss_string {}};
	#if $my[prots][mg] {#if $defs[mg] {#var mg_string <ACA>mg**<088>} {#var mg_string mg**} } {#var mg_string {}};
	#if $my[prots][MG] {#if $defs[MG] {#var MG_string <ACA>MG**<088>} {#var MG_string MG**} } {#var MG_string {}};
	#if $my[prots][PG] {#if $defs[PG] {#var pg_string <ACA>PG**<088>} {#var pg_string PG**} } {#var pg_string {}};
	#if $my[prots][PE] {#if $defs[PE] {#var pe_string <ACA>PE**<088>} {#var pe_string PE**} } {#var pe_string {}};
	
	#var prots_string {<fff>$MG_string $ss_string $armor_string $mag_string $rs_string $mg_string $pg_string $pe_string $blink_string $shield_string<088>};
	#replace prots_string  { } {};
	#replace prots_string  {**} { };
	#var hpStr {HP:$hp/$hp_max SP:$sp/$sp_max Sat:$gp1/$gp1_max  C:$gp2/$gp2_max  E:$ehealth};
	#var prompt2 {H:$my[hp][graph] S:$my[sp][graph] Sat:$my[gp1][graph] C:$my[gp2][graph] E:$enemy[graph]};
	#var prompt3 {Prots: $prots_string Golem: $my[golem][current]/$my[golem][reset]%  Super: $my[super][current]/$my[super][reset]%  I : $my[immersion]  G2N: $my[g2n]%   };
	#var prompt4 {Corpses: $corpses[total] (C: $corpses[coffin] I: $corpses[inventory] S: $corpses[smuggle] F: $corpses[freezer]) Gem: $my[gem]% MC: $my[mental_cognition]% Idle: $idle_cap};

	_player_heartbeat;
    _guild_heartbeat;
	draw_hpbar;
}
    

#if {"$draw[hpbar]" == "on"} {
	#var hpbar[enabledheight] $hpbar[height];
} {
	#var hpbar[enabledheight] 0;
}
    
/* calculate hpbar size and draws initial line above hpbar area */
#alias {init_hpbar} {
    
    #if {"$draw[hpbar]" == "on"} {
        #var hpbar[enabledheight] $hpbar[height];
    } {
        #var hpbar[enabledheight] 0;
    }

    #math hpbar[top] {$screen[height] - $hpbar[enabledheight]};
    #math hpbar[bottom] {$hpbar[top] + $hpbar[height] - 1};
    #math hpbar[right] {$hpbar[left] + $screen[width]}; 

    #if {"$draw[hpbar]" == "on"} {
    	#draw {line} -$hpbar[enabledheight]-2 1 -$hpbar[enabledheight]-2 -1;
    };

    tickhp;
};

#alias {draw_hpbar} {
    #if {"$draw[hpbar]" == "on"} {
        #draw {<dda>} {tile} $hpbar[top] $hpbar[left] $hpbar[bottom] -1 {${hpStr}\n${prompt2}\n${prompt3}\n${prompt4} };
    }
}

#alias {tickhp} {
    #TICKER {update_status} {
            #math {idle} {$idle + 1};
    } {1}
}

#class {miphp} {close}