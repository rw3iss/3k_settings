#class {player_heartbeat} {kill}
#class {player_heartbeat} {open}

#var bot_toggle 0;
#var ash_toggle 0;
#var golem_toggle 0;
#var immersion_casts 1;
#var ms7_toggle 0;
#var corpse_toggle 0;

#var toggle_spelltap 1;

#alias {_player_heartbeat} {
    #var mc_threshold 90;
    #var mc_danger 60;
    #math sp_threshold {$my[sp][max] * .90};
    #math sp_percent {$my[sp][current] * 100 / $my[sp][max]};
    #math hp_percent {$my[hp][current] * 100 / $my[hp][max]};
    #math summon_sp_minimum {$my[sp][max] * .4};

    #if !$idle_flag {
        #if {$hpbar_mc < $mc_danger && !$bot_toggle && $bot[active]} {
            ptell Pausing to study spellbook.;
            #var bot_toggle 1;
            .pause;
        };
        #if {($my[sp][current] < $sp_min || $my[gp1][current] > $monitors[saturation-stop]) && $corpses[total] < 5 && !$bot_toggle && $bot[active]} {
            ptell {Stopping:  SP: $my[sp][current] Saturation: $my[gp1][current] Conc: $hpbar_mc};
            #var bot_toggle 1;
            .pause;
        };
        #if {($my[sp][current] > $sp_threshold && $my[gp1][current] < $monitors[saturation-start] && $hpbar_mc > $mc_threshold) && $bot_toggle && $bot[active]} {
            ptell Resuming:  SP: $my[sp][current] Saturation: $my[gp1][current] Conc: $hpbar_mc;
            #var bot_toggle 0;
            ..;
        };
    };

    #NOP -- Heartbeat actions that should only be attempted once per round;
    #if {!$idle_flag && $action_round < $mip[round]} {
        #if $strategy[epowers] {
            #if {$mip[round] > 2 && $mip[round] < 7} {
                #if $my[eternal][fry] {(fry;};
                #if ${my[eternal][energy well]} {(energy well;} {#if ${my[eternal][shred]} {(shred;};};
            };
        };

        #if {$my[immersion][count] && !$my[immersion][rounds] && ($my[golem][reset] > 80 || $my[sp][current] < $sp_min)} {
            cast mystic immersion;
            cast giant strength oscar;
            cast giant strength golem;
            #if $summoner {summon_str;cast haste on summons;};
        };		

        #if {$my[gp1][current] > $monitors[saturation-corpse] && $corpses[total] > 0 && !$my[super][current] && !$corpse_toggle} {#var corpse_toggle 1;corpse_select;#delay 4 {cast spell tap on corpse;cast corpse blast;slab all;wrap all;#var corpse_toggle 0;i}};
        #if {$my[golem][current] && $golem_toggle && $strategy[golem]} {create_golem};
        
        #if {$my[gp1][current] < 30 && !$ash_toggle} {ash on;ash;#var ash_toggle 1;};
        #if {!$my[super][current] && $my[gp1][current] > $monitors[saturation-stop] && $ash_toggle} {ash off;#var ash_toggle 0;};
        #if {$my[super][current] && $my[gp1][current] > $monitors[saturation-corpse]} {cast explosive release};
        #if {$my[gem] < 80 && !$go_fetch} {#var go_fetch 1;ffetch gem};

        #if {$strategy[slow] && $mob[slow] < 1} {
            cast slow;
        };
        
        #if {$strategy[edrain] && $mob[edrain] < 1} {
            cast energy drain;
        };

        #if {$strategy[atrophy] && $mob[atrophy] < 1} {
            cast mystic atrophy;
        };

        #if {$toggle_spelltap && $strategy[spelltap] && $sp_percent > 70} {
            #var toggle_spelltap 0;
            cast spell tap never;
        };

        #if {!$toggle_spelltap && $strategy[spelltap] && $sp_percent < 30} {
            #var toggle_spelltap 1;
            cast spell tap always;
        };

        #if {!$self_haste && $sp_percent > 30 && $strategy[haste]} {
            cast haste;
            #var self_haste 1;
        };

        #if {!$golem_haste && "$my[summon][golem]" != "0" && $strategy[haste]} {
            cast haste on golem;
        };

        #if {$my[sp][current] < $sp_min && $my[eternal][heal]} {
            (heal oscar;
        };

        #if {$summoner} {
            #if {!$summons_haste && $sp_percent > 30} {
                cast haste on summons;
            };
            #if {$num_summons < $summons_desired && !$ms7_toggle} {
                #var ms7_toggle 1;
                ms7;
                #NOP -- #math summons_short {13 - $num_summons};
                #NOP -- #math summon_sp_required {455 * $summons_short};
                #NOP -- #math summon_attempts {($my[sp][current] - $summon_sp_minimum) / 455 };
                #NOP -- #loop 1 $summon_attempts i {
                #NOP --     #math summon_delay {$i * 2};
                #NOP --     #delay {$summon_delay} {ms7};
                #NOP -- };
            };
            #if {$my[immersion][rounds] > 0 && $immersion_casts} {
                #if !$summons_haste {cast haste on summons;};
                #if {$num_summons < $summons_desired && !$ms7_toggle} {_update_summons;};
            };
        };

    };
};

#class {player_heartbeat} {close}