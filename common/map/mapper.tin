#class {mapper} {open}

#map read common/map/3k_map.tin;
#map goto 1;
#map goto $curvnum;

#nop empty alias, does nothing here, drawmap.tin will override if loaded;
#alias {mapupdate_draw} { #nop; };

/* Move Event */
#alias {mapupdate} {
	#map {get} {ROOMVNUM} {roomvnum};
	#map {get} {ROOMAREA} {roomarea};
	#map {get} {ROOMNAME} {roomname};
	#map {get} {ROOMDESC} {roomdesc};
	#format {roomname_len}	{%L} {$roomname};
	#format {roomvnum_len}	{%L} {$roomvnum};
	#format {roomarea_len}	{%L} {$roomarea};
	#format {roomdesc_len}	{%L} {$roomdesc};
	#math {name_len} {42-$roomvnum_len};
	#format {name_trunc} {%.${name_len}s} {$roomname};
	#unvar area_mapped;
	#map list {} {} {} {$roomarea} {variable} {area_mapped};
	#var {room_cnt} {&area_mapped[]};
	mapupdate_draw;
};

#event {MAP UPDATED VTMAP} {
	#delay {0.05} {mapupdate}
}

#event {MAP ENTER ROOM} {
	#if {"$mapping" == "on"} {
		mapupdate
	}
}

#event {MAP EXIT ROOM} {
	#list nouns clear;
}

#alias {go} {
        #map find {roomname} {%0%*};
        #nop #map find {roomnote} {%0%*};
        #path run;
};

/* Map Follow on Following Others */
#act {%1 leaves %2\.} {
	#var following %1;
	#var foldir %2;

	#switch {"$foldir"} {
		#case {"north"}	{#var foldir n};
		#case {"south"}	{#var foldir s};
		#case {"east"}	{#var foldir e};
		#case {"west"}	{#var foldir w};
		#case {"down"}	{#var foldir d};
		#case {"up"}	{#var foldir u};
	}
}

#act {%1 leaves following %2} {
	#format {follower} {%l} {%1};
	#if {"$follower" == "$world" && %2 == "$following"} {
		#map move $foldir
	}
} {4}

/* Data Grab Trigger */
#var longcap off

#function cartcheck {
	#format cart {%.20s} {%0};
	#if {"$cart" == "                    " ||
	     "$cart" == ""} {
		#return 1
	} {
		#return 0
	}
}

#NOP Room Short with Exits
#act {{-R-_(.*) \((.*)\)\s*}} {
	#var room %2;
	#var exits %3;
	#if {"$mapping" == "on"} {
		#replace exits {,} {;};
		#foreach {$exits} {eachexit} {#map dig $eachexit};
		#map get {roomexit} {rexit};
		#foreach {$rexit} {eachexit} {
			#map at {$eachexit} {
				#map get {roomarea} {eacharea};
				#if {"$eacharea" == ""} {
					#map set {roomcolor} {<118>}
				}
			}
		};
		#if {$roomname_len == 0} {
			#map set roomname {%2 (%3)}
		};
		#if {$roomarea_len == 0} {
			#map set roomarea {$area};
			#map set roomcolor
		};
		#if {$roomdesc_len == 0} {
			#var longcap on;
			#unvar long;
			#act {%%1} {
				#if {@cartcheck{%%1}} {
						#nop;
					} {
						#var long {${long}%%1 }
				}
			} {2}
		};
		#delay 0 mapupdate
	}
}

#NOP Room Short with No Exits, Lowered Priority
#act {-R-_%1%s} {
	#var room %1;
	#if {"$mapping" == "on"} {
		#if {$roomname_len == 0} {
			#map set roomname {%1}
		};
		#if {$roomarea_len == 0} {
			#map set roomarea {$area};
			#map set roomcolor
		};
		#if {$roomdesc_len == 0} {
			#var longcap on;
			#unvar long;
			#act {%%1} {
				#if {@cartcheck{%%1}} {
						#nop;
					} {
						#var long {${long}%%1 }
				}
			} {2}
		};
		#map get {roomvnum} {gonum};
		#map goto $gonum;
	}
} {6}

#act {=X={.*}} {
	#if {"$longcap" == "on"} {
		#var longcap off;
		#unact {%%1};
		#map set roomdesc {$long}
	}
} {1}

#act {AREA NAME: %1 [%2]} {
	#var area %1
}


/* Aliases */
#NOP count the # of rooms mapped
#alias {area_mapped %1} {
	#unvar area_mapped;
	#map list {} {} {} {%1} {variable} {area_mapped};
	#showme {&area_mapped[] rooms mapped.};
}

#NOP Color rooms that have no area set (unexplored)
#alias nacolor {
	#loop 1 20000 {cnt} {
		#map at {$cnt} {
			#map get {roomarea} {cntarea};
			#if {"$cntarea" == ""} {#map set roomcolor <118>}
		}
	};
	#map get {roomvnum} {gonum};
	#map goto $gonum;
	#draw {tile} 16 -45 16 -1 {<020>$roomarea <140>(<120>$room_cnt<140>)<099>};
	#draw {tile} 17 -45 17 -1 {<140>[<030>$roomvnum<140>] <130>$roomname<099>}
}

#alias {mapgo} {#map goto {roomnote} {%0}}

#alias {findhere} {
	#if {"$room" == ""} {
		look
	};
	#map list {roomarea} {$area} {roomname} {$room%*};
	#map list {roomarea} {$area} {roomname} {$room%*} {variable} {findroom};
	#if {&findroom[] == 1} {
		#list {foundroom} {create} {$findroom};
		#map goto $foundroom[1]
	}
}


#alias {mapsearch} {
	#show <129>Name matches:<088>;
	#map list {%i%*%0%*};
	#show \n;
	#show <129>Note matches:<088>;
	#map list {} {} {} {} {%i%*%0%*};
}

#alias {mapname %1} {
	#map name %1;
	#map write map/3k.map
}

#alias {mapsave} {#map write map/3k.map}
#alias {mapon} {
	!brief off yes;
	#map flag static off;
	#var mapstatic 1;
	#var area %1;
	#var mapping on;
}
#alias {mapoff}{
	!brief on yes;
	#map flag static on;
	#unvar mapstatic;
	#unvar mapping;
}
#map flag static on
#unvar mapstatic

#alias {ma} {#map set roomarea {$area}}

#NOP Search Room Nouns (built by MIP)
#alias {sn} {
	#var noun_cnt &nouns[];
	#loop 1 &nouns[] cnt {
		exa $nouns[$cnt];
		search $nouns[$cnt]
	};
	#delay 0.5 {
		#if {$noun_cnt < &nouns[]} {
			#echo {<128>New items found!  Search again!<088>}
		}
	}
}

/* Screen Sizing */

/* Transports */

#NOP Chaos TV
#act {AREA NAME: Simpsons [Doh]} {
	#if {"$area" != "Simpsons"} {
		#var {area} {Simpsons};
		#map get {roomvnum} {tvroom};
		#map goto 8315;
	}
} {4}

#act {AREA NAME: Simpsons Expansion [Lostar]} {
	#var {area} {Simpsons};
} {4}

#act {AREA NAME: Simpsons Expansion [Frank]} {
	#var {area} {Simpsons Expansion};
	#map get {roomvnum} {tvroom};
	#map goto 8227
} {4}
#act {^   You dive cleanly through the computer screen!} {
	#map goto $tvroom
}

#NOP Death
#act {^You die.$} {#map goto 6247}

#NOP Death Taco
#act {^You shoot through a graceful arc, and feel weightless for the} {#map goto {roomnote} roaches}

#NOP Kayos Portal
#act {^You leap into the unknown!} {
	#map get {roomvnum} {num};
	#if {$num == 10278} {
		#map goto $plungeroom
	} {
		#var plungeroom $num;
		#map goto 10278
	}
}

#NOP Night of Colour
#act {^The balloon softly touches down, basket bumps lightly.} {exit}
#act {^You step out of the basket, into forest.} {
	#map get {roomarea} {area};
	#if {"$area" == "Night of Colour"} {
		#map goto 16359
	} {
		#map goto  16530
	}
}
#act {^You step out of the basket, into chaos.} {
	#map get {roomarea} {area};
	#if {"$area" == "Night of Colour"} {
		#map goto 16307
	} {
		#map goto 16527
	}
}


/* Blocked Exits */
#act {^You cannot go } {
	#if {$mapstatic} {
		#map undo
	}
}
#act {^You cannot get it up.} {
	#if {$mapstatic} {
		#map undo
	}
}


#class {mapper} {close}
