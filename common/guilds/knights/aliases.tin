#class {knight_aliases} {kill};
#class {knight_aliases} {open};

#NOP NOTE: Needs cleaning!;

#alias {info} {knight};

#alias {fw} {unwield %1;fix %1; wield %1;}

#alias {wa} {#send {wear all};pp};
#alias {ua} {unkeep all;pp};

#alias {mm} {method melee};
#alias {md} {stance def;mm;shieldblock on;parry on;};
#alias {bcc} {battlecry Battlecrymenow.;hp};
#alias {st} {staunch};
#alias {stt} {#10 staunch;hp};

#NOP UTILITY / NON-COMBAT =====================================================;
#alias {ce} {callesquire};
#alias {sa} {send away};
#alias {efm} {get back from horse;ce;esq goshop tack feed;#delay 3 {ge;give bag to horse}};
#alias {efml} {get bag from horse;ce;esq goshop tack feed/carrot/carrot/carrot/carrot/carrot/carrot/carrot;#delay 3 {ge;give bag to horse;#7 {give carrot to horse}}}
#alias {ss} {shine on};
#alias {gq} {guildquests};
#alias {eft} {ce;esq goshop avrin tinder;#delay {2} {ge;sa}};
#alias {rs} {resist};

#alias {lantern} {ce;esq goshop avrin lantern;#delay {2}{ge;light lantern}};
#alias {fire} {ce;esq goshop avrin tinder/pail;#delay {2} {ge;campfire}};

#nop for when strain breaks, we have to recover;
#alias {fixme} {
	study on;
	endure on;
    stance offense;
	mmc;
	react at 300 stm with secondwind;
	doaction **@staunch;
};



#alias {corpsetrig} {

    #if {$getcorpses == 1} {
        immolate corpse;
        bury corpse;
        get coins;
    }
    #if {$bot[active] == 1} {.bot};

};

#nop /* Sets kill target */;
#alias {k} {
	#var killing %0;
	#var incombat 1;
	#var truced 0;
	#var resting 0;
	#if {$my[settings][killfollow] == 1} { follow $killing; };
	#if {"$my[battlecry]" == "n"} {bcc};
	#act {There is no $killing here} {
		#if {$bot[active]} {.bot};
	};
	kill $killing;
	#delay {.25} {#unact {There is no $killing here}}
} {1};





#alias {tr} {
	#if {$party == 1} {
		#if {"$partyLeader" == "zorbaine"} {
			#show ----------- LOW, NEED TO TRUCE!!! =============;
			ptell Need to truce, please wimpy/leave!
			#delay {2} {truce;truce}
		} {
			cassist +clear;
			truce;
			truce;
		};
	} {
		truce;
		truce;
	};
};

#alias {cassist2} {\cassist %1;#var cassisting %1;#var Cassisting: %1;#if {"%1" == "+clear"} {#var cassisting 0}};

#alias {killing} {#var killing %1;#show Set target to: <119>%1<088>;hp;};




#NOP SCRIPTY STUFF ============================================================;

#alias {corpseon} {#var getcorpses 1;#show Corpse burying enabled.;};
#alias {corpseoff} {#var getcorpses 0;#show Corpse burying disabled.;};

#nop /* Helper to set when we'll safety-check/truce on low stamina, or emergency check/bail */;
#alias {scheck} { #var my[stam][safetycheck] %1;#echo {Stamina safety check set to $my[stam][safetycheck]\.}};
#alias {echeck} {#var my[stam][emergency] %1;#show Stamina wimpy level set to: %1};

#alias {embalmon} {#var embalmcorpses 1;@show{Embalm on}};
#alias {embalmoff} {#var embalmcorpses 0;@show{Embalm off}};

#alias {sporkon} {#var hasspork 1;#show Spork healing enabled.};
#alias {sporkoff} {#var hasspork 0;#show Spork healing disabled.};

#nop Chalice of Tarin, replenishes strain;
#var chalice 0;
#alias {chaliceon} {#var chalice 1;#show Chalice enabled.;};
#alias {chaliceoff} {#var chalice 0;#show Chalice disabled.;};


#alias {cih} {cut head;get head;impale head on stake;bc};


#nop /* performed as a knight on any kill, self or others */;
#alias {_guild_killTriggerAlways} {
	#if {"$killCountAll" == "10"} {
		arepair all;
		#var killCountAll 0;
	}
}

#alias {_guild_killTrigger} {
	#if {"$killCountAll" == "10"} {
		arepair all;
		#var killCountAll 0;
	}
}

#alias {{_ondeath}} {
	rest;
	staunch;
	#if {$bomsget} {get all;put all in boms};
	#if {$usemask == 0} { #delay {botrest} {_checkwait} {2}};
	#nop _checkwait;
	#delay {checkassist} {_checkAssist} {1};
	#var connedmob 0;

};

#alias {rr} {$wimpyreturn;};

#alias {{_autoswap}} {
	#if {$autowep == 0} {
		#echo {Autowep set to 1};
		#var autowep 1;
		#act {{Your best weapon against this foe is (.*)\.}} {
			#if {"$my[wielded]" != "%2"} {
				#var my[wielded] %2;
				unwield;
				#format {tmpwield} {%l} {%2;}
				wield $tmpwield;
			};
		};
	} {
		#echo {Autowep set to 0};
		#var autowep 0;
		#unact {{Your best weapon against this foe is (.*)\.}};
	};
};

#alias {{ewatch (\w+) (.+)}} {#unact {$static[ewatch][trig]};#var static[ewatch][cmd] %2;#var static[ewatch][trig] %3;#delay {ewatch} {_checkitem} {60};};

#alias {{^ewatch off$}} {#unact {$static[ewatch][trig]};#undelay {ewatch};#undelay {ewatch_scan}};

#alias {_checkitem} {
	$static[ewatch][cmd];
	#act {Your esquire sees:} {
		#delay {ewatch_scan} {
			#unact {Your esquire sees:};
			#undelay {ewatch_scan};
			#act {$static[ewatch][trig]} {#bell;#bell;#bell;} {2};
			#delay {ewatch} {_checkitem} {60};
		} {2};
	} {2}; 
}

#alias {_checkwait} {
	#if {$my[stam][delta] < 500 && $my[strain][delta] < 70 && $my[sp][delta] < 50} {
		#if {$my[secondwind][current] == 100 || $my[strain][delta] < 10} {
			j;
		} {
			#delay {botrest} {_checkwait} {2}
		};
	} {
		#delay {botrest} {_checkwait} {2}
	};
};

#alias {_checkwimpy} {
	#if {$bouncebot == 1} {
		#if {$my[stam][delta] < 10 && $my[strain][delta] == 0 && $my[sp][delta] < 50} {
			$wimpyreturn;
			#var wimpied 0;
			k $kill[last];
		} {
			#delay {wimpyrest} {_checkwimpy} {2};
		};
	}
};

#alias {_checkAssist} {
	#if {$partymode == 1} {
		#if {$my[secondwind][current] == 100} {
			pa;#undelay {assistrest};
		} {
			#if {$my[stam][delta] < 10 && $my[strain][delta] == 0} {
				pa;#undelay {assistrest};
			} {
				#delay {assistrest} {_checkAssist} {2};
			};
		};
	}
};

#alias {{k(?:ill)? (.*)}} {#var kill[last] %2;!kill ${kill[last]};} {2};

#alias {bb} {
	#if {$bouncebot == 1} {
		#var bouncebot 0;#showme {BounceBot set to $bouncebot};
	} {
		#var bouncebot 1;#showme {BounceBot set to $bouncebot};
	};
};

#al {{^ham (.+)$}} {
	#var hamstring[target] %2;
	!hamstring %2;
	#act {{hamstrings, but it is too nimble, and darts away!}} {
		!hamstring $hamstring[target];
	};
	#act {{slice at (.+)'s hamstrings, lightly wounding it!}} {
		!hamstring $hamstring[target];
	};
	#act {{slice at (.+)'s hamstrings, completely crippling (him|her|it)!}} {
		#unact {{hamstrings, but (him|her|it) is too nimble, and darts away!}};
		#unact {{slice at (.+)'s hamstrings, lightly wounding (him|her|it)!}};
		#unact {{slice at (.+)'s hamstrings, completely crippling (him|her|it)!}};
		#unvar hamstring[target];
	};
};

#alias {{_setreflex (\w+)}} {
	#if {"%2" == "default"} {
		!reflex clear;
		!reflex add hp <50% staunch;
		!reflex add hp <70% staunch;
		!reflex add hp <75% staunch;
		!reflex add sp <75% peace;
		!reflex add gp2 >110 secondwind;
	};
	#if {"%2" == "taco"} {
		!reflex clear;
		!reflex add hp <501% resist;
		!reflex add hp <501% wear all;
		!reflex add hp <501% staunch;
		!reflex add hp <501% staunch;
		!reflex add hp <501% staunch;
	};
};

#alias {_boot} {
	guild;enter;n;quickbuy;buy sack;buy tinder;buy tinder;buy tinder;buy tinder;buy tinder;buy tinder;buy tinder;n;quickbuy;e;quickbuy;wear all;hone sword;hone sword 2;smuggle shield;wield sword;wear all;smuggle sword;kae;put all in sack;smuggle sack;w;s;s;out;h
};

#class {knight_aliases} {close};