#class {psicorps_heartbeat} {kill}
#class {psicorps_heartbeat} {open}

#var use_body_fuel 1;
#var use_chain 1;
#var _adapt_body edged;
#var current_adapt_body none;
#var hbp 0; /* has a heartbeat power been used this heartbeat */
#var power_override none; /* if not equal to "none", uses this power immediately once */
#var _DEBUG_HB 0;

#NOP -- Power helpers;

/* 
 %1 - power short name
 %2 - full power name
*/
#function {check_power} {
  #if {!$hbp} {
    #regex {$my[powers]} {%1} {
      #if {!$combat[%1] && $my[powers][%1]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning off %1};
        %2 off;
        #return #nop;
      };
      #elseif {$my[powers_time][%1] < 10} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] refreshing %2};
        @use_power{%2};
        #return #nop;
      };
      #else {
        #return #nop
      };
    } {
      #if {$combat[%1]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning on %2};
        @use_power{%2};
        #return #nop;
      };
      #else {
        #return #nop;
      };
    };
  };
  #else {
    #return #nop;
  };
  #return #nop;
};

#function {check_adapt_body} {
  #if {!$hbp} {
    #regex {$my[powers]} {ab} {
      #if {!$combat[ab] && $my[powers][ab]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning off ab};
        adapt body off;
        #var {current_adapt_body} {none};
        #return #nop;
      };
      #elseif {$my[powers_time][ab] < 10} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] refreshing adapt body};
        @use_power{adapt body $_adapt_body};
        #var {current_adapt_body} {$_adapt_body};
        #return #nop;
      };
      #elseif {"$current_adapt_body" != "$_adapt_body"} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] changing adapt body dmg type to $_adapt_body};
        @use_power{adapt body $_adapt_body};
        #var {current_adapt_body} {$_adapt_body};
        #return #nop;
      }
      #else {
        #return #nop
      };
    } {
      #if {$combat[ab]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning on adapt body};
        @use_power{adapt body $_adapt_body};
        #var {current_adapt_body} {$_adapt_body};
        #return #nop;
      };
      #else {
        #return #nop;
      };
    };
  };
  #else {
    #return #nop;
  };
  #return #nop;
};


#function {use_power} {
  #var tmp_last_power_used %0;
  #act {{You must wait %d round%w before you can use this power again.|You may only use one power per round.}} {
    #show <069>==> Failed to use $tmp_last_power_used<900>;
  } {5};
  %0;
  #var hbp 1;
  #show <069>==> %0<900>;
  #return #nop;
};

#NOP -- Heartbeat;

#act {^HP: %d/%d  SP: %d/%d  PE: %d/%d  ST: %d/%d} {
    #var my[hp][current] %1;
    #var my[hp][max] %2;
    #var my[sp][current] %3;
    #var my[sp][max] %4;
    #var my[gp1][current] %5;
    #var my[gp1][max] %6;
	  #var my[gp2][current] %7;
    #var my[gp2][max] %8;
    
  	#if {$_DEBUG_HB} { 
  		#SHOW [debug_heartbeat] HP: $my[hp][current]/$my[hp][max];
  		#SHOW [debug_heartbeat] SP: $my[sp][current]/$my[sp][max];
  		#SHOW [debug_heartbeat] GP1: $my[gp1][current]/$my[gp1][max];
  		#SHOW [debug_heartbeat] GP2: $my[gp2][current]/$my[gp2][max];
    };

    #delay {0.1} {
      _guild_heartbeat;
      _player_heartbeat;
    };
};

#act {^[[%*]]} {
    #var powers %1;
    #replace powers {:}{};
    #replace powers { }{;};
    #list powers create $powers;

    #NOP -- Hack for powers without a time (dodge, expertise, etc.);

    #list {powers} {find} {D} {D_index};

    #if {$D_index > 0} {
      #math insert_index {$D_index + 1};
      #list {powers} {insert} {$insert_index} {1000};
    };

    #list {powers} {find} {E} {E_index};

    #if {$E_index > 0} {
      #math insert_index {$E_index + 1};
      #list {powers} {insert} {$insert_index} {1000};
    };

    #NOP -- End hack;

    #var i 1;
    #list {powers} {size} {size};    

    #var my[powers] [];
    #var my[powers_time] [];
    #while {$i < $size} {
        #math {time_index} {$i + 1};
        #list {powers} {get} {$i} {power};
        #list {powers} {get} {$time_index} {time};
        #regex {$time} {%d} {#var time &0};
        #var my[powers][$power] 1;
        #var my[powers_time][$power] $time;
        #math {i} {$i + 2};
    };
};

#alias {_guild_heartbeat} {
	#var hbp 0;

  #if {"$power_override" != "none"} {
    @use_power{$power_override};
    #var power_override none;
  };

  #nop -- Healing;

  #math {hp_percent} {$my[hp][current] / $my[hp][max] * 100.0};
  #math {stamina_percent} {$my[gp2][current] / $my[gp2][max] * 100.0};
  #var {hp_heal_threshold_body_adjustment} {85.0};
  #var {hp_heal_threshold_chain_body_adjustment} {70.0};
  #var {hp_heal_threshold_chain_stamina_threshold} {2.0};

  #math {should_use_chain_body_adjustment} {$hp_percent <= $hp_heal_threshold_chain_body_adjustment && $stamina_percent >= $hp_heal_threshold_chain_stamina_threshold && $use_chain};
  #math {should_use_body_adjustment} {$hp_percent <= $hp_heal_threshold_body_adjustment};

  #if {$should_use_chain_body_adjustment} {
    @use_power{chain body adjustment, body adjustment};
  };
  #elseif {$should_use_body_adjustment} {
    @use_power{body adjustment};
  };

  #nop -- Defense;

	@check_power{AA;animal affinity bull};
  @check_adapt_body{};
  @check_power{Bf;biofeedback};
  @check_power{Cp;combat precognition};
  @check_power{D;dodge};
  @check_power{Eb;energy barrier};
  @check_power{Ib;inertial barrier};
	@check_power{IB;improved biofeedback};
  @check_power{Iv;improved verve};
  @check_power{IV;improved valor};
  @check_power{Vg;vigor};
	@check_power{Vr;valor};
	@check_power{Vv;verve};

  #nop -- Offense;
  
  @check_power{Bo;bolt};
  @check_power{CP;combat prescience};
  @check_power{E;expertise};
  @check_power{Ij;iron jaw};
  @check_power{Sj;steel jaw};

  #nop -- Targeted powers;

  @check_power{Ac3;astral construct 3};
  @check_power{Ac4;astral construct 4};
  @check_power{Ac5;astral construct 5};
	@check_power{bc;biocurrent};
  @check_power{CG;conductive grasp};

  #nop --- Recall pain;

  #if {$combat[rpain]} {
    #if {!$hbp} {
      #math {gp1_percent} {$my[gp1][current] / $my[gp1][max] * 100.0};
      #if {$gp1_percent > 80.0} {
        #if {$rpain_cnt == 0} {
          @use_power{recall pain};
          #math {rpain_cnt} {$rpain_cnt + 1};
        };
        #else {
          #math {rpain_cnt} {$rpain_cnt - 1};
        };
      };
    };
  };

  #if {$combat[ragony]} {
    #if {!$hbp} {
      #math {gp1_percent} {$my[gp1][current] / $my[gp1][max] * 100.0};
      #if {$gp1_percent > 80.0} {
        #if {$ragony_cnt == 0} {
          @use_power{recall agony};
          #math {ragony_cnt} {$ragony_cnt + 5};
        };
        #else {
          #math {ragony_cnt} {$ragony_cnt - 1};
        };
      };
    };
  };

  #nop -- GP1 healing;

  #if {!$hbp} {
    #nop -- Convert calcs;

    #var {sp_to_psi_ratio} {0.2};
    #math {psi_missing} {$my[gp1][max] - $my[gp1][current]};
    
    #nop -- Body fuel calcs;

    #var {hp_to_psi_ratio} {0.36};
    #var {max_hp_to_spend_ratio} {0.15};

    #math {max_hp_to_spend} {$my[hp][max] * $max_hp_to_spend_ratio};
    #math {hp_to_spend} {$psi_missing / $hp_to_psi_ratio};
    #if {$hp_to_spend > $max_hp_to_spend} {
      #var {hp_to_spend} {$max_hp_to_spend};
    };

    #math {safe_hp_threshold} {1 - $max_hp_to_spend_ratio};
    #math {can_safely_use_body_fuel} {$my[hp][current] / $my[hp][max] >= $safe_hp_threshold};

    #nop -- Pick GP1 heal power;

    #if {$my[sp][current] / $my[sp][max] > 0.99 && $psi_missing >= $my[sp][max] * $sp_to_psi_ratio} {
      @use_power{convert};
    };
    #elseif {$can_safely_use_body_fuel && $use_body_fuel} {
      @use_power{body fuel $hp_to_spend};
    };
  };
};

#class {psicorps_heartbeat} {close}