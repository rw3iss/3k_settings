#CLASS {sewerbot} OPEN 
#map create 
#map goto 1 
#map flag vtmap on 
#split 10 4
#map flag asciigraphics on

#var exit 0 
#var foundroom 0 
#var foundmob 0 
#var foundplayer 0 
#var halt 0 
#var leave 0 
#var mobname 0 
#var numexits 0 
#var reverse 0 
#list {sewerexits} {clr} 
#list {newexits} {clr} 
#list {curexits} {clr} 

#NOP Bind numpad '/' to advance rooms, '+' to stop, '*' to run to a stub room.
#alias {stopbot} {#var halt 1;#map run stub;#map name {}} 
#alias {stop} {#var halt 1};
#alias {..} {#var foundplayer 0;#var foundmob 0;#var foundroom 0;#var halt 0;glance}
#alias {back} {#var halt 1;#map run stub;#map name {}}
#alias {halt} {#var halt 1};

#action {>%*} { 
   xx 
} {10} 

/* Avoid rooms with players heavenly|saintly|very good|*/ 
#action {-P-} 
{ 
   #var foundplayer 1;
   #var foundmob 0;
};

#function {joinlist} {
   #var temp {%2};
   #var j 0;
   #foreach {%1} {i} {
		#if {$j == 0} {
			#var j 1;
			#continue;
		};
		#list {temp} {find} {$i} {found};
		#if {$found==0} {#list {result} {insert} {-1} {$i}};
		#var j 0;
	};
}

#function {reversedir} { 
   #if {"%1"=="n"} {#var result s} 
   #if {"%1"=="s"} {#var result n} 
   #if {"%1"=="e"} {#var result w} 
   #if {"%1"=="w"} {#var result e} 
   #if {"%1"=="u"} {#var result 0} 
};

/* Returns a list of all elements in list1 that are not also in list2 */ 
#function {listcompare} { 
	#var temp {%2};
	#foreach {$temp[]} {key} { 
	    #showme {key: $key}; 
	};
} 

#action {You lose your footing and wind up flat on your butt} 
{  
   #map undo;
   $exit;   
} 

#action {{Dead End|Sewer Maze|Sewer Portal} (%2)} 
{ 
	#var foundroom 1;
	#map get roomexits curexits;

    #var sewerexits %2;
	#replace {sewerexits} {,} {;};
    #list {sewerexits} {create} {$sewerexits};

	#list curexits clr;
    #foreach {$sewerexits} {i} {
		#if {$j == 0} {
			#var j 1;
			#continue;
		};
		#list curexits add $i;
		#var j 0;
	};

   #list {sewerexits} {find} {u} {result};

   #if {$result > 0} {  
		#map name portal;
		#if {$leave == 1} {#var halt 1;#map destroy;#class sewerbot kill};
		#list {sewerexits} {del} {$result};
	};

   #var newexits @listcompare{{$sewerexits};{$curexits}};

   #list {newexits} {size} {numexits};

   #if {$numexits > 0} {
		#var exit $newexits[+1d$numexits];
		#if {$numexits > 1} {#map name stub};
   } {
      #list {sewerexits} {find} {$reverse} {result};
      #list {sewerexits} {delete} {$result};
      #list {sewerexits} {size} {numexits};
      #if {$numexits > 0} {#var exit $sewerexits[+1d$numexits]} {#var exit $reverse};
   };

   #var reverse @reversedir{$exit};
}

#action {^-M-_{Slug|Muck Monster|Venomous sludge|Thorn beast|Grimy Beast|Mudman|Living Fungus}}
{
	#if {"%1"=="Slug"} {#var mobname slug}
	#if {"%1"=="Muck Monster"} {#var mobname monster}
	#if {"%1"=="Venomous sludge"} {#var mobname sludge}
	#if {"%1"=="Thorn beast"} {#var mobname beast}
	#if {"%1"=="Grimy Beast"} {#var mobname beast}
	#if {"%1"=="Mudman"} {#var mobname mudman}
	#if {"%1"=="Living Fungus"} {#var mobname fungus};
	#if {$leave==0 && $foundmob==0 && $foundplayer==0}
	{
		#var foundmob 1;
		#var halt 1;
		k $mobname;
	};
};

#alias xx {
	#if {$foundmob==0 && $foundroom==1 && $halt==0}
	{
		#var foundroom 0;
		#var foundplayer 0;
		$exit;
	}
}

#act {dealt the killing blow to} {..};
#act {gurgles in his own blood} {..};
#act {gurgles in its own blood} {..};
#act {gurgles in her own blood} {..};
#act {gasps for breath, then slumps into death} {..};
#act {screeches in agony and falls to the ground, dead} {..};

#nop Item pickup;
#var pickupitems 0;
#alias {itemson} {#show Pickup items on.;#var pickupitems 1};
#alias {itemsoff} {#show Pickup items off.;#var pickupitems 0};

#act {^\({o|a|w}\)} {#var founditem 1;gi};

#alias {gi} {
   #if {$pickupitems == 1} {
      #if {$foundplayer == 1} {
      } {
         ga;pab;
      };
   };
};

#action {Putting 'all' in 'bag of devouring' master.} {put all in bag 2};

#CLASS {sewerbot} CLOSE


/* random exits chooser: 

#function random_exit 
{ 
    #map get roomexits result; 
    #list exits create $result[]; 
    #var result $exits[1d&exits[]] 
};
@random_exit{};
*/

