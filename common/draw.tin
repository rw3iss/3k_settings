#CLASS draw {open}

#NOP /* Pass 0-100 percentage number to split the current screen at. */
#alias {setsplit} {
    #math _perc {%1 * .01}; 
    #var splitWidthPerc $_perc;
    #var canvas[widthperc] $_perc;
    #var map[widthperc] $_perc;
    #var infoPane[widthperc] $_perc;
    #show \nSplit width percentage set to: %1\%;
    init_screen;
};

#alias draw_tab_menu {
    #draw {<dda>} {tile} $map[height]+2 $infoPane[left]+1 $infoPane[top] $screen[width] {TEST TEST EST EST};  
};

#event {SHORT-CLICKED MOUSE BUTTON ONE} {#showme %4}

#NOP /* Calculate various area dimensions, called on start and SCREEN RESIZE */
#alias init_screen {
    #screen get 	rows 	screen[height];
    #screen get 	cols 	screen[width];

    #format map[width] {%d} {$map[widthperc] * $screen[width]};
    
    #format map[height] {%d} {$map[heightperc] * $screen[height]};
    #math map[left] {$screen[width] - $map[width]};

    #format infoPane[width] {%d} {$infoPane[widthperc] * $screen[width]};

    #if {"$draw[hpbar]" == "on"} {
        #list {hpbar[prompt]} {size} {hpbar[height]};
        
        #NOP --- create space for static hpbar at bottom and reset map position;
        #split 0 $hpbar[height];
    } {
        #var hpbar[height] 0
    };

    
    #NOP -- Set the infoPane below the map;
    #math infoPane[top] {$map[height] + 3};
    #math infoPane[bottom] {$screen[height] - $hpbar[height] - 1};
    #math infoPane[left] {$screen[width] - $map[width]};

    #var infoMenu[height] 2;
    #var infoMenu[bottom] $infoPane[top];

    #math infoMenu[top] {$infoPane[top] - $infoMenu[height]};
    #math infoMenu[left] {$screen[width] - $map[width]};

    #if {"$draw[canvas]" == "on"} {
        #format canvas[width] {%d} {$canvas[widthperc] * $screen[width] + 1};
    } {
        #var canvas[width] 0
    };

    #if {"$draw[caption]" == "on"} {
        #if {$eternal} {#var caption[height] 4;} {#var caption[height] 3];};
        #math caption[top] {$infoPane[top] - $caption[height] + 2};
    } {
        #var caption[height] 0;
    };

    #nop Clear any previous drawings;
    #screen clear split;
    #buffer end;

    #math status[height] { $hpbar[height] + 1}; 

    #nop Split bottom area for hp+guild/stats bar;
    #var 	split[top]		0;
    #var 	split[bottom]	$status[height];
    #var    split[left]     0;
    #var 	split[right]	$canvas[width];
    #split 	$split[top] $split[bottom] $split[left] $split[right];

    init_map;
    init_hpbar;
}

#alias draw_all {
    #if {"$draw[hpbar]" == "on"} { draw_hpbar };
    #if {"$draw[caption]" == "on"} { draw_caption };
    #if {"$draw[room]" == "on"} { draw_room };
    #if {"$draw[status]" == "on"} { draw_status };
};

#alias draw_infoPane_Tabs {
    #draw {line} $infoPane[top]-1 $infoPane[left]+1 $infoPane[top]-1 $screen[width];
    #draw {<dda>} {tile} $infoPane[top] $infoPane[left]+1 $infoPane[bottom] $screen[width] {CLICK HERE FOR OPTIONS};
};

#NOP /* calculate hpbar size and draws initial line above hpbar area */
#alias {init_hpbar} {
    #if {"$draw[hpbar]" == "on"} {
        #math hpbar[top] {$screen[height] - $hpbar[height]};
        #math hpbar[bottom] {$hpbar[top] + $hpbar[height] - 1};
        #math hpbar[right] {$hpbar[left] + $screen[width]}; 
    	#draw {line} -$hpbar[height]-2 1 -$hpbar[height]-2 -1;
    } {
        #var hpbar[height] 0;
    };
    tickhp;
};

#alias draw_hpbar {
    #loop 1 $hpbar[height] index {
        #var prompt $hpbar[prompt][+$index];
        #math hpbar_line {$hpbar[top] + $index - 1};
        #draw {<eeb>} {tile} $hpbar_line $hpbar[left] $hpbar_line -1 {$prompt};
    };
};

#alias draw_bot {
    #if $bot[active] {
        #var status_string_bot {<088>Bot Status  : <DAA><aaa>PAUSED<088>  $bot_current_room/$bot_total_rooms ($bot_progress%)};
    } {
        #var status_string_bot {<088>Bot Status  : <ACA><fff>ACTIVE<088>  $bot_current_room/$bot_total_rooms ($bot_progress%)};
    };
}

#NOP /* -- CAPTION (Idle timer, Corpses, etc) -- */
#alias draw_caption {
    #nop -- Clear any old drawings;
    #draw {<dda>} {tile} $caption[top] $infoPane[left]+1 $caption[top]+1 $screen[width] {};

    #var caption[idle_string] {Idle: $idle_cap  <daa>Deadmans: $deadManTimeLeft_cap};
    #var caption[corpse_string] {$corpse_string};
    #var caption[eternal_string]  {$eternal_string};
    #draw {<dda>} {tile} $caption[top] $infoPane[left]+2 $caption[top] $screen[width] {$caption[idle_string]};
    #draw {<dda>} {tile} $caption[top]+1 $infoPane[left]+2 $caption[top]+1 $screen[width] {$caption[corpse_string]};
    #draw {<dda>} {tile} $caption[top]+2 $infoPane[left]+2 $caption[top]+2 $screen[width] {$caption[eternal_string]};
    #draw line $caption[top]+3 $infoPane[left]+1 $caption[top]+3 $screen[width];
}

#NOP /* -- CHAT LOGS -- */
#alias draw_chat {
    #nop todo...;
    chatend;
}

#NOP /* -- MAP -- */
#alias init_map {
    #if {"$draw[map]" == "on"} {
        #draw line $map[height] $map[left]+1 $map[height] $screen[width];
        #map offset 1 -$map[width] $map[height]-1 -1;
        #map flag vtmap on;
    } {
        #map flag vtmap off
    };
}

#NOP /* -- ROOM -- */
#alias draw_room {
    #nop -- Clear any old drawings;
    #draw {<dda>} {tile} $infoPane[top]+1 $infoPane[left] $infoPane[bottom] $screen[width] {};
    
    #var _lbl <cba>;

    #var nounStr {};
    #foreach {*nouns[%*]} {idx} {
        #var noun $nouns[$idx];
        #var nounStr {$nounStr$noun };
    };
    
    #var roomNameStr {<fff>${infoPane[name]}<088>};
    #var nounStr {<ade>${nounStr}<088>};
    
    #nop NOTES from mapper;
    #map get roomname roomMapNameStr;
    #map get roomnote roomMapNoteStr;
    
    #format roomStr {%s\n%s\n%s\n\n%s\n%s\n%s} 
        {${_lbl}MIP name: <ffa>$roomNameStr<099>} 
        {${_lbl}MIP nouns: ${nounStr}} 
        {${_lbl}MIP exits:<088> <afe>${exitStr}<088>} 
        {${_lbl}Map vnum:<088> $roomvnum} 
        {${_lbl}Map name:<088> $roomMapNameStr} 
        {${_lbl}Map notes:<088> $roomMapNoteStr};

    #draw {<dda>} {tile} $infoPane[top]+2 $infoPane[left] $infoPane[top]+2 $screen[width] {<ffa>Room:<088>};
    #draw {<dda>} {tile} $infoPane[top]+3 $infoPane[left] $infoPane[top]+3 $screen[width] {$roomStr};
}

#NOP /* -- Player Status -- */
#alias draw_status {

    #nop -- Clear any old drawings;
    #draw {<dda>} {tile} $infoPane[top] $infoPane[left]+2 $infoPane[bottom] $screen[width] {};
    
    #if $reforger {
        #var prof_type Reforger:;
        #var prof_charges $my[reforger];
    };

    #if $bot[active] {
        #var status_string_bot_rows 3;
        #path get length bot_total_rooms;
        #path get position bot_current_room;

        #math bot_current_room {$bot_current_room - 1};
        #math bot_progress {100 * $bot_current_room / $bot_total_rooms};

        #if $bot[paused] {
            #var status_string_bot {<088>Bot Status  : <DAA><aaa>PAUSED<088>  $bot_current_room/$bot_total_rooms ($bot_progress%)};
        } {
            #var status_string_bot {<088>Bot Status  : <ACA><fff>ACTIVE<088>  $bot_current_room/$bot_total_rooms ($bot_progress%)};
        };

        #if $bot[playercheck] {
            #cat status_string_bot {\nPlayercheck : <afa>ON<088>};
        } {
            #cat status_string_bot {\nPlayercheck : <daa>OFF<088>};
        };
        #var status_string_bot_rows 3;
    } {
        #var status_string_bot <088>Bot: <fff>OFF<088>;
        #var status_string_bot_rows 1;
    };

    #var status_string_strategy <bef>Strategy:<088>\n;

    #foreach *strategy[] index {
        #format strat_name {%-15s} {$index};
        #format strat_name {%n} {$strat_name};
        #if {$strategy[$index]} {
            #cat status_string_strategy {$strat_name : <afa>ON<088>\n};
        } {
            #cat status_string_strategy {$strat_name : <daa>OFF<088>\n};
        };

        #NOP - get the number of rows the strategy takes and pad it by 2;
        #list {strategy} {size} status_string_strategy_rows;
        #math status_string_strategy_rows {$status_string_strategy_rows + 2};
    };

    #draw {<dda>} {tile} $infoPane[top]+2 $infoPane[left]+2 $infoPane[bottom] $screen[width] {$status_string_bot};
    #draw {<dda>} {tile} $infoPane[top]+2+$status_string_bot_rows $infoPane[left]+2 $infoPane[bottom] $screen[width] {$status_string_strategy};

}

#alias draw_mage_summons {

    #format summonStrTitleName  {%-15s} {Name};
    #format summonStrTitleCount {%+8s}  {Count};
    #format summonStrTitleDmg   {%+10s}  {Avg. Dmg};
    #format summonStrTitleAcc   {%+10s}  {Accuracy};

    #var summonStr {};
    #foreach {*active_summons[%*]} {idx} {
        #format summonStrName  {%-15s} {$active_summons[$idx][name]};
        #format summonStrCount {%+8s}  {$active_summons[$idx][count]};
        #format summonStrDmg   {%+10s} {$active_summons[$idx][avg_dmg]};
        #format summonStrAcc   {%+10s} {$active_summons[$idx][accuracy]};

        #format summonDetails {%s%s%s%s\n} 
            {$summonStrName}
            {$summonStrCount}
            {$summonStrDmg}
            {$summonStrAcc};

        #var summonStr {$summonStr$summonDetails};
    };


    #format summonTitle {%s%s%s%s\n}
        {$summonStrTitleName}
        {$summonStrTitleCount}
        {$summonStrTitleDmg}
        {$summonStrTitleAcc};

    #draw {<dda>} {tile} $map[height]+1 $infoPane[left] $infoPane[bottom] $screen[width] {<ffa>$summonTitle<088>};
    #draw {<dda>} {tile} $map[height]+2 $infoPane[left] $infoPane[bottom] $screen[width] {$summonStr};
}

#EVENT {SCREEN RESIZE}
{
    init_screen;
    draw_all;
}

#NOP /* kick off */;
init_screen;
draw_all;

#CLASS draw {close}