#CLASS draw {open}

/* draw[] variables need to be set in player's vars.tin:
#nop VARIABLE {draw} {
    {canvas}{on}
    {caption}{on}
    {chat}{on}
    {gline}{on}
    {map}{on}
	{hpbar}{on}
    {room}{on}
};
*/

/* Pass 0-100 percentage number to split the current screen at. */
#alias {setsplit} {
    #math _perc {%1 * .01}; 
    #var splitWidthPerc $_perc;
    #var canvas[widthperc] $_perc;
    #var map[widthperc] $_perc;
    #var infoPane[widthperc] $_perc;
    #show \nSplit width percentage set to: %1\%;
    init_screen;
};

/* Calculate various area dimensions, called on start and SCREEN RESIZE */
#alias init_screen {
    #screen get 	rows 	screen[height];
    #screen get 	cols 	screen[width];

    #format map[width] {%d} {$map[widthperc] * $screen[width]};
    #format map[height] {%d} {$map[heightperc] * $screen[height]};
    #math map[left] {$screen[width] - $map[width]};

    #format infoPane[width] {%d} {$infoPane[widthperc] * $screen[width]};
    #format infoPane[height] {%d} {$infoPane[heightperc] * $screen[height]};
    #math infoPane[top] {$screen[height] - $infoPane[height]};
    #math infoPane[bottom] {$screen[height] - $hpbar[height] - 1};
    #math infoPane[left] {$screen[width] - $map[width]};

    #if {"$draw[canvas]" == "on"} {
        #format canvas[width] {%d} {$canvas[widthperc] * $screen[width] + 1};
    } {
        #var canvas[width] 0
    }

    #if {"$draw[caption]" == "on"} {
        #var caption[height] 2
    } {
        #var caption[height] 0
    }

    #if {"$draw[chat]" == "on"} {
        #math chat[height] {$chat[rows] + 1};
        #if {"$draw[map]" == "on"} {
            #math {chat[right]} {-$map[width]-2}
        } { 
            #var chat[right] -1
        }
        
        #draw {green} {line} $chat[height] 1 $chat[height] -1;
    } {
        #var chat[height] 0
    }
    
    #if {"$draw[gline]" == "on"} {
        #var gline[height] 2
    } {
        #var gline[height] 0
    }

    #nop Clear any previous drawings;
    #screen clear split;
    #buffer end;

    #math status[height] { $hpbar[height] + 1}; 

    #nop Split bottom area for hp+guild/stats bar;
    #math 	split[top]		{$chat[height] + $caption[height]};
    #var 	split[bottom]	$status[height];
    #var    split[left]     0;
    #var 	split[right]	$canvas[width];
    #split 	$split[top] $split[bottom] $split[left] $split[right];
    #nop show split: $split[top] $split[bottom] $split[left] $split[right];

    init_map;
    init_hpbar;
}


#alias draw_all {
    #if {"$draw[chat]" == "on"} { draw_chat };
    #if {"$draw[room]" == "on"} { draw_room };
    #if {"$draw[status]" == "on"} { draw_status };
    #if {"$draw[hpbar]" == "on"} { draw_hpbar };
    #if {"$draw[caption]" == "on"} { draw_caption };
}


/* -- CAPTION (Idle timer, uptime, etc) -- */
#alias draw_caption {
    #format {uptimeStr}	{%+8s}	{$session[uptime]};
    #format {rebootStr}	{%+5s}	{$session[reboot]};
    #format {lagStr}	{%+4s}	{$session[lag]};
    #math	{idle_hr}	{$idle / 3600};
    #math	{idle_min}	{$idle % 3600 / 60};
    #math	{idle_sec}	{$idle % 60};
    #if	{$idle_hr < 10}	{#var idle_hr  0$idle_hr};
    #if	{$idle_min < 10} {#var idle_min 0$idle_min};
    #if	{$idle_sec < 10} {#var idle_sec 0$idle_sec};
    #format {idleStr}	{%+4s}	{<268>[<128>$idle_hr<268>:<128>$idle_min<268>:<128>$idle_sec<268>]<088>};
    
    #var statStr {I:${idleStr}  R:[${rebootStr}]  U:[${uptimeStr}] };

    #draw {<dda>} {tile} 1 $hpbar[left] $hpbar[bottom] -1 {${hpStr}\n${prompt2}\n${prompt3} };
}

/* -- CHAT LOGS -- */
#alias draw_chat {
    #nop todo...;
    chatend;
}

/* -- MAP -- */
#alias init_map {
    #if {"$draw[map]" == "on"} {
        #draw line $map[height] $map[left] $map[height] $screen[width];
        #map offset 1 -$map[width] $map[height]-1 -1;
        #map flag vtmap on;
    } {
        #map flag vtmap off
    };
}

/* -- ROOM -- */
#alias draw_room {
    #nop -- Clear any old drawings;
    #draw {<dda>} {tile} $map[height]+1 $infoPane[left] $infoPane[bottom] $screen[width] {};
    
    #var _lbl <cba>;

    #var nounStr {};
    #foreach {*nouns[%*]} {idx} {
        #var noun $nouns[$idx];
        #var nounStr {$nounStr$noun };
    };
    
    #var roomNameStr {<fff>${infoPane[name]}<088>};
    #var nounStr {<ade>${nounStr}<088>};
    
    #nop NOTES from mapper;
    #map get roomname roomMapNameStr;
    #map get roomnote roomMapNoteStr;
    
    #format roomStr {%s\n%s\n%s\n\n%s\n%s\n%s} 
        {${_lbl}MIP name: <ffa>$roomNameStr<099>} 
        {${_lbl}MIP nouns: ${nounStr}} 
        {${_lbl}MIP exits:<088> <afe>${exitStr}<088>} 
        {${_lbl}Map vnum:<088> $roomvnum} 
        {${_lbl}Map name:<088> $roomMapNameStr} 
        {${_lbl}Map notes:<088> $roomMapNoteStr};

    #draw {<dda>} {tile} $map[height]+1 $infoPane[left] $infoPane[bottom] $screen[width] {<ffa>Room:<088>};
    #draw {<dda>} {tile} $map[height]+2 $infoPane[left] $infoPane[bottom] $screen[width] {$roomStr};
}

/* -- Player Status -- */
#alias draw_status {

    #nop -- Clear any old drawings;
    #draw {<dda>} {tile} $map[height]+1 $infoPane[left] $infoPane[bottom] $screen[width] {};
    
    #if $reforger {
        #var prof_type Reforger:;
        #var prof_charges $my[reforger];
    };

    #if $botting {
        #var status_string_bot_rows 3;
        #path get length bot_total_rooms;
        #path get position bot_current_room;

        #math bot_progress {100 * $bot_current_room / $bot_total_rooms};

        #if $halt {
            #var status_string_bot {<088>Bot Status  : <DAA><aaa>PAUSED<088>  $bot_current_room/$bot_total_rooms ($bot_progress%)};
        } {
            #var status_string_bot {<088>Bot Status  : <ACA><fff>ACTIVE<088>  $bot_current_room/$bot_total_rooms ($bot_progress%)};
        };

        #if $playercheck {
            #cat status_string_bot {\nPlayercheck : <afa>ON<088>};
        } {
            #cat status_string_bot {\nPlayercheck : <daa>OFF<088>};
        };
        #cat status_string_bot {\nDeadman     : $deadManTimeLeft_cap};
        #var status_string_bot_rows 4;
    } {
        #var status_string_bot <088>Bot: <fff>OFF<088>;
        #var status_string_bot_rows 1;
    };

    #var status_string_strategy <bef>Strategy:<088>\n;

    #loop 1 &strategy[] index {
        #var strat *strategy[+$index];
        #format strat_name {%-15s} {$strat};
        #format strat_name {%n} {$strat_name};
        #if {$strategy[$strat]} {
            #cat status_string_strategy {$strat_name : <afa>ON<088>\n};
        } {
            #cat status_string_strategy {$strat_name : <daa>OFF<088>\n};
        }

        #NOP - get the number of rows the strategy takes and pad it by 2;
        #var status_string_strategy_rows &strategy[];
        #math status_string_strategy_rows {$status_string_strategy_rows + 2};
    };

    #draw {<dda>} {tile} $map[height]+2 $infoPane[left]+2 $infoPane[bottom] $screen[width] {$status_string_bot};

    #draw {<dda>} {tile} $map[height]+2+$status_string_bot_rows $infoPane[left]+2 $infoPane[bottom] $screen[width] {$status_string_strategy};

}

#alias draw_mage_summons {

    #format summonStrTitleName  {%-15s} {Name};
    #format summonStrTitleCount {%+8s}  {Count};
    #format summonStrTitleDmg   {%+10s}  {Avg. Dmg};
    #format summonStrTitleAcc   {%+10s}  {Accuracy};

    #var summonStr {};
    #foreach {*active_summons[%*]} {idx} {
        #format summonStrName  {%-15s} {$active_summons[$idx][name]};
        #format summonStrCount {%+8s}  {$active_summons[$idx][count]};
        #format summonStrDmg   {%+10s} {$active_summons[$idx][avg_dmg]};
        #format summonStrAcc   {%+10s} {$active_summons[$idx][accuracy]};

        #format summonDetails {%s%s%s%s\n} 
            {$summonStrName}
            {$summonStrCount}
            {$summonStrDmg}
            {$summonStrAcc};

        #var summonStr {$summonStr$summonDetails};
    };


    #format summonTitle {%s%s%s%s\n}
        {$summonStrTitleName}
        {$summonStrTitleCount}
        {$summonStrTitleDmg}
        {$summonStrTitleAcc};

    #draw {<dda>} {tile} $map[height]+1 $infoPane[left] $infoPane[bottom] $screen[width] {<ffa>$summonTitle<088>};
    #draw {<dda>} {tile} $map[height]+2 $infoPane[left] $infoPane[bottom] $screen[width] {$summonStr};
}

#EVENT {SCREEN RESIZE}
{
    init_screen;
    draw_all;
}

/* kick off */
init_screen;
draw_all;

#CLASS draw {close}