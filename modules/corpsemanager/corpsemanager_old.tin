#nop parses corpse amount in inventory, coffin, and smuggle;

#class {corpse_manager} {open};
    
#var hasCoffin @hasInventory{"coffin"};

#var corpses[inventory] 0;
#var corpses[coffin] 0;
#var corpses[smuggle] 0;
#var corpses[freezer] 0;
#var hasCoffin 0;
#var coffinFull 0;

/* recalculate corpse inventory */
#alias {ci} {
	#nop check inventory;
	#var corpses[inventory] 0;
	#action {{^[ ]+?(\d+)(.*)(The|a preserved|an embalmed)(.*)(corpse|remains)(.*)}} { 
		#math {corpses[inventory]} {$corpses[inventory] + %%2};
	};

	#nop check coffin;
	#var corpses[coffin] 0;
	#action {{^ (\d+) An enchanted coffin \((\d+) corpses\)(.*)}} {
		#var hasCoffin 1;
		#var corpses[coffin] %%3;
		#unact {{^ (\d+) An enchanted coffin \((\d+) corpses\)(.*)}};
	};

	#nop check smuggle;
	#alias {countSmuggle} {
		#var corpses[smuggle] 0;
		#action {{^>(.*)(The|a preserved|an embalmed)(.*)(corpse|remains)(.*)}} {
			#math corpses[smuggle] {$corpses[smuggle] + 1};
		};

		#nop this stops the smuggle action;
		#action {{^>$}} {
			#unact {{^>$}};
			#unact {{^>(.*)(The|a preserved|an embalmed)(.*)(corpse|remains)(.*)}};
			#unact {{^>$}};
			#nop ungag {{(.*)}};

			#math {corpses[total]} {$corpses[inventory] + $corpses[coffin] + $corpses[smuggle]};

			#show @showCorpses{};
			#unalias {countSmuggle};
		};

		#delay {.2} {smuggle};
	};

	#nop this stops the inventory+coffin actions, and start smuggle action;
	#action {{^>$}} {
		#unact {{^[ ]?(\d+)(.*)(The|a preserved|an embalmed)(.*)(corpse|remains)(.*)}};
		#unact {{^ (\d+) An enchanted coffin \((\d+) corpses\)(.*)}};

		countSmuggle;
	};
 
	#nop gag {{(.*)}};
	#send i;
};

#function {showCorpses} {
	#if {$hasCoffin == 0} {#var coffinMsg You don't have a coffin.;} {#var coffinMsg Coffin: $corpses[coffin];};

	#format {result} {%s\n%s\n%s\n%s\n%s\n}
		{TOTAL CORPSES:} 
		{Inventory: $corpses[inventory]} 
		{$coffinMsg}
		{smuggle: $corpses[smuggle]}
		{Total: $corpses[total]};

	#delay {.5} {hp};
};

#nop fill corpse inventory;
#alias {recorpse} {
	#var gettingCoins 0;

	#act {{^You don't have enough money\!}} {
		#show no money;

		#act {{Pinnacle Morgue \(n\)}} {
			#unact {{Pinnacle Morgue \(n\)}};
			recorpse;
		};

		#delay {.2} {
			#if {$gettingCoins == 0} {
				#show getting coins;
				n;w;n;withdraw 35000;s;e;s;
			};
			#var gettingCoins 1;
		};
	};

	#delay {.2} {
		#7 buy 7;
		wrap all;
		#10 buy 7;
		#10 smuggle corpse;
		#30 buy 7;
		#delay {.2} {ci};
		#delay {1} {#unact {{^You don't have enough money\!}}};
		sortcorpse;
	};
};

#alias {sortcorpse} {
	wrap all;
	#20 smuggle corpse;
	#delay {.2} {ci};
};
#alias {sco} {sortcorpse};

#alias {unwrap} {
	#if {$corpses[coffin] > 0} {
		#send unwrap;
		#math {$corpses[coffin]} {$corpse[coffin]  - 1};
	} { #show No corpses in coffin. };
};

#action {There are no corpses in the coffin!} {#var coffinFull 0};
#action {The coffin is full!} {#var coffinFull 1};

/* Get initial count on load */;
#delay {1} {ci};

@register_module{corpse_manager};
@register_module_info{corpse_manager;{
    #show How to use corpse manager:
    #show ci - recalcuate corpse inventory;
    #show recorpse - refill corpse\n;
    #show sortcorpse/sco - reorganize corpses;
}};

#class {corpse_manager} {close}